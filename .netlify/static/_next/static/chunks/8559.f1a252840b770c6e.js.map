{"version":3,"file":"static/chunks/8559.f1a252840b770c6e.js","mappings":"mQA6EA,MA5DiC,QAgBjBA,EAAAA,EAJKC,EACPC,KAboB,MAAEF,CAAI,CAA4C,CA4DrEG,EA3DPC,EAASC,CAAAA,EAAAA,EAAAA,CAAAA,CAAeA,GAExB,SAAEC,CAAO,CAAE,CAyDqB,CAzDlBC,EAAAA,EAAAA,CAAAA,CAAUA,GAExB,eAAEC,CAAa,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAAgBA,GAEpC,sBAAER,CAAoB,eAAEC,CAAa,CAAE,CAAGQ,CAAAA,EAAAA,EAAAA,EAAAA,CAAwBA,GAElE,aAAEC,CAAW,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAAeA,OAACX,EAAAA,KAAAA,EAAAA,EAAsBY,GAAG,EAE3D,cAAEC,CAAY,EAFoBb,gBAElBc,CAAgB,aAAEC,CAAW,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAASA,CAAC,CAChEC,gBAA0C,QAAzBjB,QAAAA,EAAAA,KAAAA,EAAAA,EAAsBY,GAAAA,GAAtBZ,KAAAA,MAAAA,EAA6B,GAA7BA,SACW,QAAlBC,QAAAA,EAAAA,KAAAA,EAAAA,EAAeW,GAAAA,GAAfX,KAAAA,IAAAA,EAAAA,EAAsB,EAClC,GAEMiB,EAAAA,OAAQnB,GAAAA,EAAKA,IAAAA,GAALA,KAAAA,IAAAA,EAAAA,KAAAA,EAAqB,QAArBA,EAAAA,EAAWoB,UAAAA,GAAXpB,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAuBmB,KAAK,CAE1C,GAAI,CAACA,EAAO,MAAO,yBAEnB,IAAME,EAAcC,CAAAA,EAAAA,EAAAA,CAAAA,CAAQA,CAACH,EAAO,eAAEX,UAAeF,CAAQ,GAE7D,MACE,UAACiB,MAAAA,UACC,UAACC,EAAAA,CAASA,CAAAA,CAACC,KAAMC,EAAAA,CAAcA,CAACC,MAAM,CAAEC,QAAQ,OAAEtB,EAAAA,KAAAA,EAAAA,EAASuB,SAAS,UAClE,UAACC,EAAAA,CAAgBA,CAAAA,CACfX,MAAOE,EACPV,YAAa,CACXoB,UACE,CAAEV,EAAYW,gBAAgB,EAAIrB,EAAYsB,cAAc,EAC3DZ,EAAYW,gBAAgB,EAAIrB,EAAYuB,kBAAkB,CACjEC,WACE,CAAEd,EAAYW,gBAAgB,EAAIrB,EAAYyB,eAAe,EAC5Df,EAAYW,gBAAgB,EAAIrB,EAAY0B,mBAAmB,CAClEC,eACE,CAAEjB,EAAYW,gBAAgB,EAAIrB,EAAY4B,mBAAmB,EAChElB,EAAYW,gBAAgB,EAAIrB,EAAY6B,uBAAuB,CACtEC,WAAW,CACb,EACAC,SAAU,UACR,MAAM5B,EAAaK,EAAMwB,OAAO,EAChCvC,EAAOwC,OAAO,EAChB,EACAC,cAAe,MAAOC,IACpB,MAAM/B,EAAiB,CAAEgC,GAAI5B,EAAMwB,OAAO,CAAYG,SAAQ,GAC9D1C,EAAOwC,OAAO,EAChB,EACAI,SAAU,UACR,MAAMhC,EAAYG,EAAMwB,OAAO,EAC/BvC,EAAOwC,OAAO,EAChB,EACAK,YAAa,UACP9B,EAAM+B,WAAW,EAAE9C,EAAO+C,IAAI,CAACzB,EAAAA,CAAcA,CAAC0B,WAAW,CAACjC,EAAM+B,WAAW,CAACG,OAAO,CAAC,MAAO,MACjG,OAKV","sources":["webpack://_N_E/./src/lib/tastics/quote-detail/components/quote-detail-client-wrapper/index.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { DataSource } from '@/types/lib/datasources';\nimport Dashboard from '@/components/pages/dashboard';\nimport { DashboardLinks } from '@/components/pages/dashboard/constants';\nimport QuoteDetailsPage from '@/components/pages/dashboard/pages/quote-details';\nimport { mapQuote } from '@/utils/mappers/map-quote';\nimport useQuotes from '@/lib/hooks/useQuotes';\nimport { useStoreAndBusinessUnits } from '@/providers/store-and-business-units';\nimport useCustomRouter from '@/hooks/useCustomRouter';\nimport useAccount from '@/lib/hooks/useAccount';\nimport useAccountRoles from '@/lib/hooks/useAccountRoles';\nimport { TasticProps } from '@/lib/tastics/types';\nimport useBusinessUnits from '@/lib/hooks/useBusinessUnits';\nimport { DataSourceProps } from '../../types';\n\nconst QuoteDetailClientWrapper = ({ data }: TasticProps<DataSource<DataSourceProps>>) => {\n  const router = useCustomRouter();\n\n  const { account } = useAccount();\n\n  const { businessUnits } = useBusinessUnits();\n\n  const { selectedBusinessUnit, selectedStore } = useStoreAndBusinessUnits();\n\n  const { permissions } = useAccountRoles(selectedBusinessUnit?.key);\n\n  const { declineQuote, renegotiateQuote, acceptQuote } = useQuotes({\n    businessUnitKey: selectedBusinessUnit?.key ?? '',\n    storeKey: selectedStore?.key ?? '',\n  });\n\n  const quote = data.data?.dataSource?.quote;\n\n  if (!quote) return <></>;\n\n  const mappedQuote = mapQuote(quote, { businessUnits, account });\n\n  return (\n    <div data-testid={`quote-${quote.quoteId}`}>\n      <Dashboard href={DashboardLinks.quotes} userName={account?.firstName}>\n        <QuoteDetailsPage\n          quote={mappedQuote}\n          permissions={{\n            canAccept:\n              (!mappedQuote.ownedByOtherUser && permissions.AcceptMyQuotes) ||\n              (mappedQuote.ownedByOtherUser && permissions.AcceptOthersQuotes),\n            canDecline:\n              (!mappedQuote.ownedByOtherUser && permissions.DeclineMyQuotes) ||\n              (mappedQuote.ownedByOtherUser && permissions.DeclineOthersQuotes),\n            canRenegotiate:\n              (!mappedQuote.ownedByOtherUser && permissions.RenegotiateMyQuotes) ||\n              (mappedQuote.ownedByOtherUser && permissions.RenegotiateOthersQuotes),\n            canRevoke: false,\n          }}\n          onReject={async () => {\n            await declineQuote(quote.quoteId as string);\n            router.refresh();\n          }}\n          onRenegotiate={async (comment: string) => {\n            await renegotiateQuote({ id: quote.quoteId as string, comment });\n            router.refresh();\n          }}\n          onAccept={async () => {\n            await acceptQuote(quote.quoteId as string);\n            router.refresh();\n          }}\n          onViewOrder={async () => {\n            if (quote.orderNumber) router.push(DashboardLinks.orderDetail(quote.orderNumber.replace(/\\s/g, '-')));\n          }}\n        />\n      </Dashboard>\n    </div>\n  );\n};\n\nexport default QuoteDetailClientWrapper;\n"],"names":["data","selectedBusinessUnit","selectedStore","QuoteDetailClientWrapper","router","useCustomRouter","account","useAccount","businessUnits","useBusinessUnits","useStoreAndBusinessUnits","permissions","useAccountRoles","key","declineQuote","renegotiateQuote","acceptQuote","useQuotes","businessUnitKey","quote","dataSource","mappedQuote","mapQuote","div","Dashboard","href","DashboardLinks","quotes","userName","firstName","QuoteDetailsPage","canAccept","ownedByOtherUser","AcceptMyQuotes","AcceptOthersQuotes","canDecline","DeclineMyQuotes","DeclineOthersQuotes","canRenegotiate","RenegotiateMyQuotes","RenegotiateOthersQuotes","canRevoke","onReject","quoteId","refresh","onRenegotiate","comment","id","onAccept","onViewOrder","orderNumber","push","orderDetail","replace"],"sourceRoot":"","ignoreList":[]}