{"version":3,"file":"static/chunks/8241-0a0806dbb03e131e.js","mappings":"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","sources":["webpack://_N_E/./src/components/pages/dashboard/components/approval-flow-status-tag/index.tsx","webpack://_N_E/./src/lib/hooks/useApprovalFlows/index.ts","webpack://_N_E/./src/lib/tastics/approval-rules/config/approval-rules.ts","webpack://_N_E/./src/utils/mappers/map-approval-flow.ts","webpack://_N_E/./src/utils/mappers/map-approval-rule.ts"],"sourcesContent":["import React from 'react';\nimport { Variant as TagVariant } from '@/components/atoms/tag/types';\nimport Tag from '@/components/atoms/tag';\nimport useTranslation from '@/providers/I18n/hooks/useTranslation';\nimport { ApprovalFlowStatus } from '@/types/entity/approval-flow';\nimport { Props } from './types';\n\nconst ApprovalFlowStatusTag = ({ status }: Props) => {\n  const { translate } = useTranslation();\n\n  const statusVariant = {\n    accepted: 'success',\n    rejected: 'danger',\n    pending: 'warning',\n  } as Record<ApprovalFlowStatus, TagVariant>;\n\n  return (\n    <Tag className=\"capitalize\" variant={statusVariant[status]}>\n      {translate(`dashboard.approval.flow.status.${status}`)}\n    </Tag>\n  );\n};\n\nexport default ApprovalFlowStatusTag;\n","import { useCallback } from 'react';\nimport useSWR, { useSWRConfig, Key } from 'swr';\nimport { sdk } from '@/sdk';\nimport { UseApprovalFlowsOptions } from './types';\n\nconst useApprovalFlows = ({\n  businessUnitKey,\n  filters: { searchQuery, status, cursor } = {},\n}: UseApprovalFlowsOptions) => {\n  const { data, ...response } = useSWR(\n    !businessUnitKey ? null : ['/action/business-unit/queryApprovalFlows', businessUnitKey, searchQuery, status],\n    () =>\n      sdk.composableCommerce.businessUnit.queryApprovalFlows({\n        businessUnitKey: businessUnitKey as string,\n        approvalFlowIds: [...(searchQuery ? [searchQuery] : [])],\n        approvalFlowStatus: [...(status ? [status] : [])],\n        cursor,\n        sortAttributes: [{ createdAt: 'desc' }],\n      }),\n  );\n\n  const isLoading = !businessUnitKey || response.isLoading;\n\n  const { mutate: mutateSwr } = useSWRConfig();\n\n  const mutateAll = useCallback(() => {\n    mutateSwr(\n      (key: Key) => {\n        return typeof key === 'object' && key?.[0].startsWith('/action/business-unit/queryApprovalFlows');\n      },\n      undefined,\n      {\n        revalidate: true,\n      },\n    );\n  }, [mutateSwr]);\n\n  const approvalFlows = data?.isError ? [] : (data?.data?.items ?? []);\n\n  const totalItems = data?.isError ? 0 : (data?.data.total ?? 0);\n\n  const [previousCursor, nextCursor] = data?.isError\n    ? [undefined, undefined]\n    : [data?.data.previousCursor, data?.data.nextCursor];\n\n  const approveApprovalFlow = useCallback(\n    async (approvalFlowId: string) => {\n      if (!businessUnitKey) return;\n\n      const res = await sdk.composableCommerce.businessUnit.approveApprovalFlow({ approvalFlowId }, { approvalFlowId });\n\n      if (!res?.isError && res.data.approvalFlowId) mutateAll();\n\n      return res.isError ? null : res.data;\n    },\n    [businessUnitKey, mutateAll],\n  );\n\n  const rejectApprovalFlow = useCallback(\n    async (approvalFlowId: string, reason?: string) => {\n      if (!businessUnitKey) return;\n\n      const res = await sdk.composableCommerce.businessUnit.rejectApprovalFlow(\n        { approvalFlowId, reason: reason ?? '' },\n        { approvalFlowId, reason: reason ?? '' },\n      );\n\n      if (!res?.isError && res.data.approvalFlowId) mutateAll();\n\n      return res.isError ? null : res.data;\n    },\n    [businessUnitKey, mutateAll],\n  );\n\n  return {\n    approvalFlows,\n    isLoading,\n    totalItems,\n    previousCursor,\n    nextCursor,\n    approveApprovalFlow,\n    rejectApprovalFlow,\n    mutateAll,\n  };\n};\n\nexport default useApprovalFlows;\n","import { Rule, Criteria } from '@/components/organisms/rule-builder/types';\nimport { Country } from '@/types/entity/country';\n\nexport interface ApprovalRuleConfigItem {\n  type: Criteria['type']; //Types supported in rule builder currently\n  name: string; //Display name in rule builder (is translated)\n  operators: Array<{ name: string; value: string }>; //Operators available to be used by that rule (name is translated)\n  values?: Array<{ name: string; value: string }>; //Possible values to choose from in case of enum rule (name is translated)\n  constructPredicateFromRule(rule: Rule): string; //Expected to return a valid CoCo predicate from given rule\n  constructRuleFromPredicate(predicate: string): Pick<Rule, 'key' | 'operator' | 'value'>; //Expected to return a valid rule from given CoCo predicate\n}\n\nexport interface GenerateApprovalRulesParams {\n  countries: Country[];\n}\n\nexport type ApprovalRuleConfig = Record<string, ApprovalRuleConfigItem>;\n\n//Names and operator & value names will be translated as mentioned above\nexport const generateApprovalRulesConfig = ({ countries }: GenerateApprovalRulesParams): ApprovalRuleConfig => {\n  return {\n    'totalPrice.centAmount': {\n      type: 'text',\n      name: 'cart.cart.amount',\n      operators: [\n        { name: 'common.is.equal', value: '=' },\n        { name: 'common.is.more.than', value: '>' },\n        { name: 'common.is.more.than.or.equal', value: '>=' },\n        { name: 'common.is.less.than', value: '<' },\n        { name: 'common.is.less.than.or.equal', value: '<=' },\n      ],\n      constructPredicateFromRule(rule) {\n        return `${rule.key} ${rule.operator} ${parseInt(rule.value) * 100}`;\n      },\n      constructRuleFromPredicate(predicate: string) {\n        const [key, operator, value] = predicate.split(' ');\n\n        return {\n          key,\n          operator,\n          value: Math.floor(parseInt(value) / 100).toString(),\n        };\n      },\n    },\n    currency: {\n      type: 'enum',\n      name: 'common.currency',\n      operators: [\n        { name: 'common.is', value: 'is' },\n        { name: 'common.is.not', value: 'is_not' },\n      ],\n      values: [\n        { name: 'USD', value: 'USD' },\n        { name: 'EUR', value: 'EUR' },\n      ],\n      constructPredicateFromRule(rule) {\n        return `${rule.key} ${rule.operator === 'is' ? '=' : '!='} \"${rule.value}\"`;\n      },\n      constructRuleFromPredicate(predicate) {\n        const [key, operator, value] = predicate.split(' ');\n\n        return {\n          key,\n          operator: operator === '=' ? 'is' : 'is_not',\n          value,\n        };\n      },\n    },\n    country: {\n      type: 'enum',\n      name: 'common.country',\n      operators: [\n        { name: 'common.is', value: 'is' },\n        { name: 'common.is.not', value: 'is_not' },\n      ],\n      values: countries.map(({ name, code }) => ({ name, value: code })),\n      constructPredicateFromRule(rule) {\n        return `${rule.key} ${rule.operator === 'is' ? '=' : '!='} \"${rule.value}\"`;\n      },\n      constructRuleFromPredicate(predicate) {\n        const [key, operator, value] = predicate.split(' ');\n\n        return {\n          key,\n          operator: operator === '=' ? 'is' : 'is_not',\n          value,\n        };\n      },\n    },\n  };\n};\n","import { ApprovalRuleConfig } from '@/lib/tastics/approval-rules/config/approval-rules';\nimport { ApprovalFlow, ApprovalFlowStatus } from '@/types/entity/approval-flow';\nimport {\n  ApprovalFlow as CoCoApprovalFlow,\n  ApprovalFlowStatus as CoCoApprovalFlowStatus,\n} from '@shared/types/business-unit';\nimport { mapApprovalRule } from './map-approval-rule';\nimport { mapOrder } from './map-order';\n\nexport const mapCoCoApprovalFlowStatus = (status: ApprovalFlowStatus): CoCoApprovalFlowStatus => {\n  switch (status) {\n    case 'accepted':\n      return 'Approved';\n    case 'rejected':\n      return 'Rejected';\n    case 'pending':\n    default:\n      return 'Pending';\n  }\n};\n\nexport const mapApprovalFlowStatus = (status: CoCoApprovalFlowStatus): ApprovalFlowStatus => {\n  switch (status) {\n    case 'Approved':\n      return 'accepted';\n    case 'Rejected':\n      return 'rejected';\n    case 'Pending':\n    default:\n      return 'pending';\n  }\n};\n\nexport const mapApprovalFlow = (\n  approvalFlow: CoCoApprovalFlow,\n  approvalRulesConfig: ApprovalRuleConfig,\n): ApprovalFlow => {\n  return {\n    id: approvalFlow.approvalFlowId,\n    date: approvalFlow.order.createdAt ? new Date(approvalFlow.order.createdAt).toISOString() : '',\n    status: mapApprovalFlowStatus(approvalFlow.approvalFlowStatus ?? 'Pending'),\n    businessUnit: { key: approvalFlow.businessUnitKey },\n    rules: approvalFlow.approvalRules.map((rule) => mapApprovalRule(rule, approvalRulesConfig)) ?? [],\n    order: mapOrder(approvalFlow.order),\n    approvals: (approvalFlow.approvalFlowApprovals ?? []).map((approval) => ({\n      approvedAt: approval.approvedAt ? new Date(approval.approvedAt).toISOString() : '',\n      approver: {\n        key: approval.approver.accountId as string,\n        name: `${approval.approver.firstName ?? ''} ${approval.approver.lastName ?? ''}`.trim(),\n        roles: (approval.approver.roles ?? []).map(({ key, name }) => ({ key: key ?? '', name: name ?? '' })),\n      },\n    })),\n    rejection: {\n      rejectedAt: approvalFlow.approvalFlowRejection?.rejectedAt\n        ? new Date(approvalFlow.approvalFlowRejection?.rejectedAt as unknown as string).toISOString()\n        : '',\n      reason: approvalFlow.approvalFlowRejection?.reason ?? '',\n      rejecter: {\n        key: approvalFlow.approvalFlowRejection?.rejecter.accountId as string,\n        name: `${approvalFlow.approvalFlowRejection?.rejecter.firstName ?? ''} ${\n          approvalFlow.approvalFlowRejection?.rejecter.lastName ?? ''\n        }`.trim(),\n        roles: (approvalFlow.approvalFlowRejection?.rejecter.roles ?? []).map(({ key, name }) => ({\n          key: key ?? '',\n          name: name ?? '',\n        })),\n      },\n    },\n    eligibleApprovers: approvalFlow.eligibleApprovers.map((approver) => ({\n      key: approver.key ?? '',\n      name: approver.name,\n    })),\n    pendingApprovers: approvalFlow.pendingApprovers.map((approver) => ({\n      key: approver.key ?? '',\n      name: approver.name,\n    })),\n    currentPendingApproverTiers: approvalFlow.currentTierPendingApprovers.map((approver) => ({\n      key: approver.key ?? '',\n      name: approver.name,\n    })),\n  };\n};\n","import {\n  ApprovalRule,\n  ApproverConjunction,\n  ApproverDisjunction,\n  ApproverHierarchy,\n  AssociateRole,\n} from '@shared/types/business-unit';\nimport { ApprovalRule as EntityApprovalRule } from '@/types/entity/approval-rule';\nimport { Group, Rule } from '@/components/organisms/rule-builder/types';\nimport { ApprovalRuleConfig } from '@/lib/tastics/approval-rules/config/approval-rules';\n\nexport const mapCoCoApproversTiers = (approvers: EntityApprovalRule['approvers']): ApproverConjunction[] => {\n  if (!approvers) return [];\n\n  const _mapApproverHierarchy = (rule: Group | Rule): ApproverDisjunction => {\n    if (rule.type === 'rule') {\n      return {\n        or: [\n          {\n            key: rule.key,\n          },\n        ],\n      };\n    }\n\n    return {\n      or: rule.rules.filter((rule) => rule.type === 'rule').map((subRule) => ({ key: (subRule as Rule).key })),\n    };\n  };\n\n  return approvers.map((group) => group.rules.map(_mapApproverHierarchy)).map((group) => ({ and: group }));\n};\n\nexport const mapCoCoRulesPredicate = (\n  rules: EntityApprovalRule['rules'],\n  approvalRulesConfig: ApprovalRuleConfig,\n): string => {\n  if (!rules) return '';\n\n  const _mapRulePredicate = (rule: Group | Rule): string => {\n    if (rule.type === 'rule') return approvalRulesConfig[rule.key].constructPredicateFromRule(rule);\n\n    const res = [];\n\n    for (let i = 0; i < rule.rules.length; ++i) {\n      const formNestedParentheses =\n        rule.rules[i].type === 'group' &&\n        (rule.rules[i] as Group).rules.length > 1 &&\n        (rule.rules[i] as Group).combinator !== rule.combinator;\n\n      if (formNestedParentheses) res.push('(');\n\n      res.push(_mapRulePredicate(rule.rules[i]));\n\n      if (formNestedParentheses) res.push(')');\n\n      if (i < rule.rules.length - 1) res.push(rule.combinator.toLowerCase());\n    }\n\n    return res.join(' ');\n  };\n\n  return _mapRulePredicate(rules[0]);\n};\n\nexport const mapCoCoApprovalRule = (\n  approvalRule: EntityApprovalRule,\n  approvalRulesConfig: ApprovalRuleConfig,\n): ApprovalRule => {\n  return {\n    name: approvalRule.name,\n    description: approvalRule.description,\n    requesters: approvalRule.requesters,\n    approvalRuleStatus: approvalRule.status === 'active' ? 'Active' : 'Inactive',\n    approvers: { tiers: mapCoCoApproversTiers(approvalRule.approvers) },\n    predicate: mapCoCoRulesPredicate(approvalRule.rules, approvalRulesConfig),\n  };\n};\n\nexport const mapRulesPredicate = (predicate: string, approvalRulesConfig: ApprovalRuleConfig): Group[] => {\n  const _mapPredicate = (predicate: string): Group => {\n    const rules = [] as Array<Group | Rule>;\n\n    const tokens = predicate.split(' ');\n\n    let combinator: Group['combinator'] = 'AND';\n\n    const stack = [] as string[];\n\n    const _buildRuleFromStack = () => {\n      const [value, operator, key] = [stack.pop(), stack.pop(), stack.pop()] as [string, string, string];\n\n      rules.push({\n        type: 'rule',\n        ...approvalRulesConfig[key].constructRuleFromPredicate(`${key} ${operator} ${value.replace(/\\\"/g, '')}`),\n      });\n    };\n\n    let i = 0;\n\n    while (i < tokens.length) {\n      let j = i + 1;\n\n      if (tokens[i] === '(') {\n        const subPredicate = [];\n\n        let stack = 0;\n\n        while (tokens[j] !== ')' || stack > 0) {\n          if (tokens[j] === '(') ++stack;\n          else if (tokens[j] === ')') --stack;\n          subPredicate.push(tokens[j++]);\n        }\n\n        ++j;\n        rules.push(_mapPredicate(subPredicate.join(' ')));\n      } else if (tokens[i] === 'and' || tokens[i] === 'or') {\n        combinator = tokens[i] === 'and' ? 'AND' : 'OR';\n        _buildRuleFromStack();\n      } else {\n        stack.push(tokens[i]);\n      }\n      i = j;\n    }\n\n    if (stack.length > 0) {\n      _buildRuleFromStack();\n    }\n\n    return { type: 'group', combinator, rules };\n  };\n\n  return [_mapPredicate(predicate)];\n};\n\nexport const mapApproversTiers = (approversHierarchy: ApproverHierarchy): Group[] => {\n  return approversHierarchy.tiers\n    .map((tier) => tier.and)\n    .map((conjunction) => ({\n      type: 'group',\n      combinator: 'AND',\n      rules: conjunction.map((disjunction) => {\n        const _mapRule = (role: AssociateRole) => ({\n          type: 'rule',\n          isPlaceholder: false,\n          key: role.key as string,\n          operator: '',\n          value: '',\n        });\n\n        if (disjunction.or.length === 1) return _mapRule(disjunction.or[0]);\n\n        return {\n          type: 'group',\n          combinator: 'OR',\n          rules: disjunction.or.map((role) => _mapRule(role)),\n        };\n      }),\n    })) as Group[];\n};\n\nexport const mapApprovalRule = (\n  approvalRule: ApprovalRule,\n  approvalRulesConfig: ApprovalRuleConfig,\n): EntityApprovalRule => {\n  return {\n    id: approvalRule.approvalRuleId ?? approvalRule.key ?? '',\n    name: approvalRule.name,\n    description: approvalRule.description,\n    requesters: approvalRule.requesters.map(({ key, name }) => ({ key: key ?? '', name: name ?? key ?? '' })),\n    status: (approvalRule.approvalRuleStatus ?? 'Inactive').toLowerCase() as EntityApprovalRule['status'],\n    rules: mapRulesPredicate(approvalRule.predicate, approvalRulesConfig),\n    approvers: mapApproversTiers(approvalRule.approvers),\n  };\n};\n"],"names":["status","ApprovalFlowStatusTag","translate","useTranslation","Tag","className","variant","accepted","rejected","pending","data","useApprovalFlows","businessUnitKey","filters","searchQuery","cursor","response","useSWR","sdk","composableCommerce","businessUnit","queryApprovalFlows","approvalFlowIds","approvalFlowStatus","sortAttributes","createdAt","isLoading","mutate","mutateSwr","useSWRConfig","mutateAll","useCallback","key","startsWith","undefined","revalidate","approvalFlows","isError","items","totalItems","total","previousCursor","nextCursor","approveApprovalFlow","approvalFlowId","res","rejectApprovalFlow","reason","generateApprovalRulesConfig","countries","type","name","operators","value","rule","parseInt","operator","constructRuleFromPredicate","predicate","split","Math","floor","toString","currency","values","constructPredicateFromRule","country","map","code","mapCoCoApprovalFlowStatus","approvalFlow","approvalRulesConfig","id","date","order","Date","toISOString","mapApprovalFlowStatus","rules","approvalRules","mapApprovalRule","mapOrder","approvals","approvalFlowApprovals","approval","approvedAt","approver","accountId","firstName","lastName","trim","roles","rejection","rejectedAt","approvalFlowRejection","rejecter","eligibleApprovers","pendingApprovers","currentPendingApproverTiers","currentTierPendingApprovers","mapCoCoApproversTiers","approvers","_mapApproverHierarchy","or","filter","group","and","_mapRulePredicate","i","length","formNestedParentheses","combinator","push","toLowerCase","join","approvalRule","description","requesters","approvalRuleStatus","tiers","mapCoCoRulesPredicate","mapRulesPredicate","_mapPredicate","tokens","stack","_buildRuleFromStack","pop","replace","j","subPredicate","approversHierarchy","tier","conjunction","_mapRule","isPlaceholder","role","disjunction","approvalRuleId","mapApproversTiers"],"sourceRoot":"","ignoreList":[]}