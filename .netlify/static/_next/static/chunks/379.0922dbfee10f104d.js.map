{"version":3,"file":"static/chunks/379.0922dbfee10f104d.js","mappings":"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","sources":["webpack://_N_E/./src/components/pages/dashboard/pages/addresses/index.tsx","webpack://_N_E/./src/lib/tastics/addresses/hooks/useSubPath/index.tsx","webpack://_N_E/./src/lib/tastics/addresses/hooks/useSearch/index.ts","webpack://_N_E/./src/lib/tastics/addresses/components/addresses-client-wrapper/index.tsx"],"sourcesContent":["import React from 'react';\nimport useTranslation from '@/providers/I18n/hooks/useTranslation';\nimport InfoBanner from '@/components/molecules/info-banner';\nimport SearchPanel from '../../components/search-panel';\nimport AddressesTable from '../company-admin/components/addresses-table';\nimport { AddressesPageProps } from './types';\n\nconst AddressesPage = ({ addresses, loading, onDeleteAddress, onSearchAddresses, viewOnly }: AddressesPageProps) => {\n  const { translate } = useTranslation();\n\n  return (\n    <div>\n      {viewOnly && (\n        <InfoBanner className=\"mt-3\">\n          <b>{translate('common.view.only')}</b> {translate('dashboard.addresses.view.only.desc')}\n        </InfoBanner>\n      )}\n\n      <h1 className=\"py-6 text-18 font-extrabold text-gray-800 md:py-7 md:text-20 lg:py-9 lg:text-24\">\n        {translate('common.addresses')}\n      </h1>\n\n      <SearchPanel\n        translations={{ button: translate('dashboard.address.add') }}\n        buttonLink={`?subPath=add-address`}\n        buttonDisabled={viewOnly}\n        onSearchChange={onSearchAddresses}\n        isEmpty={!addresses.length}\n        isLoading={loading}\n        entity={translate('common.addresses')}\n      >\n        <AddressesTable onDeleteAddress={onDeleteAddress} addresses={addresses} />\n      </SearchPanel>\n    </div>\n  );\n};\n\nexport default AddressesPage;\n","import { useMemo } from 'react';\nimport { useSearchParams } from 'next/navigation';\nimport { AddressesPageProps } from '@/components/pages/dashboard/pages/addresses/types';\nimport AddressForm from '@/components/molecules/address-form';\n\nconst useSubPath = (props: AddressesPageProps) => {\n  const searchParams = useSearchParams();\n\n  const subPath = searchParams.get('subPath');\n\n  const ActiveSubPath = useMemo(() => {\n    const components = {\n      'add-address': {\n        title: 'dashboard.address.add',\n        Component: (\n          <AddressForm\n            {...({\n              ...props,\n              addresses: props.addresses,\n              onAddAddress: props.onAddAddress,\n            } as React.ComponentProps<typeof AddressForm>)}\n          />\n        ),\n      },\n      'edit-address': {\n        title: 'dashboard.address.edit',\n        Component: (\n          <AddressForm\n            {...({\n              ...props,\n              addresses: props.addresses,\n              onUpdateAddress: props.onUpdateAddress,\n            } as React.ComponentProps<typeof AddressForm>)}\n          />\n        ),\n      },\n    };\n\n    if (!subPath || !Object.keys(components).includes(subPath)) return;\n\n    return components[subPath as keyof typeof components];\n  }, [subPath, props]);\n\n  return { subPath, ActiveSubPath };\n};\n\nexport default useSubPath;\n","import { useCallback, useState } from 'react';\nimport { Address } from '@shared/types/account/Address';\nimport { Props } from './types';\n\nconst useSearch = ({ addresses }: Props) => {\n  const [search, setSearch] = useState({ addresses: '' });\n\n  const handleSearch = useCallback(\n    (key: keyof typeof search) => {\n      return (val: string) => setSearch({ ...search, [key]: val });\n    },\n    [search],\n  );\n\n  const searchAddresses = (\n    { firstName, lastName, streetName, streetNumber, city, country, state }: Address,\n    searchValue: string,\n  ) => {\n    return [firstName, lastName, streetName, streetNumber, city, country, state].some(\n      (e) => e && e.includes(searchValue),\n    );\n  };\n\n  return {\n    searchedAddresses: addresses.filter((address) => searchAddresses(address, search.addresses)),\n    handleSearch,\n  };\n};\n\nexport default useSearch;\n","'use client';\n\nimport React from 'react';\nimport Dashboard from '@/components/pages/dashboard';\nimport { DashboardLinks } from '@/components/pages/dashboard/constants';\nimport AddressesPage from '@/components/pages/dashboard/pages/addresses';\nimport { AddressesPageProps } from '@/components/pages/dashboard/pages/addresses/types';\nimport useAccount from '@/lib/hooks/useAccount';\nimport { mapAddress, mapCoCoAddress } from '@/utils/mappers/map-address';\nimport { useStoreAndBusinessUnits } from '@/providers/store-and-business-units';\nimport useBusinessUnits from '@/lib/hooks/useBusinessUnits';\nimport useAccountRoles from '@/lib/hooks/useAccountRoles';\nimport useProjectSettings from '@/lib/hooks/useProjectSettings';\nimport { mapCountry } from '@/utils/mappers/map-country';\nimport useSubPath from '../../hooks/useSubPath';\nimport useSearch from '../../hooks/useSearch';\n\nconst AddressesClientWrapper = () => {\n  const { projectSettings } = useProjectSettings();\n\n  const { account, isLoading } = useAccount();\n\n  const { selectedBusinessUnit } = useStoreAndBusinessUnits();\n\n  const { addAddress, removeAddress, updateAddress, businessUnits } = useBusinessUnits();\n\n  const addresses = (businessUnits.find((bu) => bu.key === selectedBusinessUnit?.key)?.addresses ?? []).map(mapAddress);\n\n  const { searchedAddresses, handleSearch } = useSearch({ addresses });\n\n  const { permissions } = useAccountRoles(selectedBusinessUnit?.key);\n\n  const viewOnly = !permissions.UpdateBusinessUnitDetails;\n\n  const addressesProps = {\n    addresses: searchedAddresses,\n    loading: isLoading || !selectedBusinessUnit?.key,\n    onSearchAddresses: handleSearch('addresses'),\n    viewOnly,\n    onAddAddress: async (address) => {\n      if (!selectedBusinessUnit?.key) return false;\n\n      const addressRes = await addAddress({ ...mapCoCoAddress(address), businessUnitKey: selectedBusinessUnit?.key });\n      return !!addressRes.businessUnitId;\n    },\n    onUpdateAddress: async (address) => {\n      if (!selectedBusinessUnit?.key) return false;\n\n      const addressRes = await updateAddress({\n        ...mapCoCoAddress(address),\n        businessUnitKey: selectedBusinessUnit?.key,\n      });\n      return !!addressRes.businessUnitId;\n    },\n    onDeleteAddress: async (addressId) => {\n      if (!selectedBusinessUnit?.key) return false;\n\n      const addressRes = await removeAddress({ addressId, businessUnitKey: selectedBusinessUnit?.key });\n      return !!addressRes.businessUnitId;\n    },\n    countryOptions: (projectSettings?.countries ?? []).map(mapCountry).map(({ name, code, states }) => ({\n      name,\n      value: code,\n      states: states.map(({ name, code }) => ({ name, value: code })),\n    })),\n  } as AddressesPageProps;\n\n  const { ActiveSubPath } = useSubPath(addressesProps);\n\n  return (\n    <Dashboard title={ActiveSubPath?.title} href={DashboardLinks.addresses} userName={account?.firstName}>\n      {ActiveSubPath?.Component ?? <AddressesPage {...addressesProps} />}\n    </Dashboard>\n  );\n};\n\nexport default AddressesClientWrapper;\n"],"names":["AddressesPage","addresses","loading","onDeleteAddress","onSearchAddresses","viewOnly","translate","useTranslation","div","InfoBanner","className","b","h1","SearchPanel","translations","button","buttonLink","buttonDisabled","onSearchChange","isEmpty","length","isLoading","entity","AddressesTable","subPath","useSearchParams","useSubPath","get","ActiveSubPath","useMemo","components","title","Component","AddressForm","props","onAddAddress","onUpdateAddress","Object","keys","includes","useSearch","search","setSearch","useState","handleSearch","useCallback","key","val","searchAddresses","searchValue","firstName","lastName","streetName","streetNumber","city","country","state","some","e","searchedAddresses","filter","address","businessUnits","projectSettings","AddressesClientWrapper","useProjectSettings","account","useAccount","selectedBusinessUnit","useStoreAndBusinessUnits","addAddress","removeAddress","updateAddress","useBusinessUnits","find","bu","map","mapAddress","permissions","useAccountRoles","UpdateBusinessUnitDetails","addressesProps","addressRes","mapCoCoAddress","businessUnitKey","businessUnitId","addressId","countries","mapCountry","name","code","states","value","Dashboard","href","DashboardLinks","userName"],"sourceRoot":"","ignoreList":[]}